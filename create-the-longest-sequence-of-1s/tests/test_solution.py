import unittest
from src.solution import solution


class TestSolution(unittest.TestCase):

    def test_1_bit(self):
        readings = "00"
        self.assertEqual(solution(readings), 1)

    def test_50_bits(self):
        readings = "01110100110011000101001100011110010010101011111011"
        self.assertEqual(solution(readings), 8)

    def test_20_bits(self):
        readings = "00101001100011001111"
        self.assertEqual(solution(readings), 5)

    def test_32_bits(self):
        readings = "10000000011100000000011111000001"
        self.assertEqual(solution(readings), 6)

    def test_random_32_bits(self):
        readings = "00010111111001000101011111111010"
        self.assertEqual(solution(readings), 10)

    def test_whole_strign(self):
        readings = "111111101111111"
        self.assertEqual(solution(readings), 15)

    def test_whole_string(self):
        readings = "1110011100111"
        self.assertEqual(solution(readings), 4)

    def test_gaps(self):
        readings = "110110011100111"
        self.assertEqual(solution(readings), 5)

    def test_all_zeros(self):
        readings = "00000000000000000000"
        self.assertEqual(solution(readings), 1)

    def test_steps(self):
        readings = "101101110111101111101111110"
        self.assertEqual(solution(readings), 12)

    def test_5_bits(self):
        readings = "01010"
        self.assertEqual(solution(readings), 3)

    def test_random_100(self):
        readings = "0010000011000101001110010011011001000111010010101111000011011110001000000000100010100011010100011101"
        self.assertEqual(solution(readings), 7)

    def test_100_bits(self):
        readings = "1011010111110110111001001110111011000001011010110011101101111101111111011100011001101011011110001010"
        self.assertEqual(solution(readings), 13)

    def test_999_bits(self):
        readings
        self.assertEqual(solution(readings), 23)

    def test_11_bits(self):
        readings = "11011101111"
        self.assertEqual(solution(readings), 8)
